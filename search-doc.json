{"searchDocs":[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"RxJS Event Forwarding","type":0,"sectionRef":"#","url":"/blog/rx-js-event-forwarding","content":"@Component({ selector: 'my-app', standalone: true, imports: [CommonModule], templateUrl: './comp.html', }) export class App implements OnInit { name = 'Angular'; extras$ = of({ extra: 'extra data for event' }); array = ['A', 'B', 'C', 'D', 'E']; event$ = interval(1000).pipe( take(this.array.length), map((i) =&gt; this.array[i]) ); ngOnInit() { this.event$.subscribe((ev) =&gt; { this.extras$.pipe(take(1)).subscribe((r) =&gt; { console.log('Throw new event with: ', r, ev); }); }); } } ","keywords":"","version":null},{"title":"RxJS Pluck Operator","type":0,"sectionRef":"#","url":"/blog/rx-js-pluck","content":"import { from } from 'rxjs'; import { pluck } from 'rxjs/operators'; const source = from([{ name: 'Joe', age: 30 }, { name: 'Sarah', age: 35 }]); //grab names const example = source.pipe(pluck('name')); //output: &quot;Joe&quot;, &quot;Sarah&quot; const subscribe = example.subscribe(val =&gt; console.log(val)); ","keywords":"","version":null},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"RxJS Loading Flag","type":0,"sectionRef":"#","url":"/blog/rx-js-loading-flag","content":"Ways to implement the isLoading flag export interface HttpRequestState&lt;T&gt; { isLoading: boolean; value?: T; error?: HttpErrorResponse | Error; } export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}) ) ), ); } &lt;ng-container *ngIf=&quot;myDataState$ | async as data&quot;&gt; &lt;my-loading-spinner *ngIf=&quot;data.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;data.error&quot; [error]=&quot;data.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;data.value&quot; [data]=&quot;data.value&quot;&gt;&lt;/my-data-component&gt; &lt;/ng-container&gt; Improved separation of concerns // presentational component class export class SomeLayoutComponent { @Input() state: HttpRequestState&lt;MyData&gt;; } &lt;!-- Presentational component template --&gt; &lt;my-loading-spinner *ngIf=&quot;state.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;state.error&quot; [error]=&quot;state.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;state.value&quot; [data]=&quot;state.value&quot;&gt;&lt;/my-data-component&gt; &lt;!-- Smart component template --&gt; &lt;some-layout-component [state]=&quot;myDataState$ | async&quot; &gt;&lt;/some-layout-component&gt; Or separated observables export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}), shareReplay(1) // Added shareReplay to allow multicasting this ) ), ); readonly loading$ = this.myDataState$.pipe(map(state =&gt; state.isLoading)); readonly error$ = this.myDataState$.pipe(map(state =&gt; state.error)); readonly myData$ = this.myDataState$.pipe(map(state =&gt; state.data)); } shareReplay(1) is preferred over share() for robustness, as it ensures none of the subscriptions miss the initial state.","keywords":"","version":null},{"title":"Improved separation of concerns","type":0,"sectionRef":"#","url":"/blog/tags/essentials","content":"Ways to implement the isLoading flag export interface HttpRequestState&lt;T&gt; { isLoading: boolean; value?: T; error?: HttpErrorResponse | Error; } export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}) ) ), ); } &lt;ng-container *ngIf=&quot;myDataState$ | async as data&quot;&gt; &lt;my-loading-spinner *ngIf=&quot;data.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;data.error&quot; [error]=&quot;data.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;data.value&quot; [data]=&quot;data.value&quot;&gt;&lt;/my-data-component&gt; &lt;/ng-container&gt; Improved separation of concerns // presentational component class export class SomeLayoutComponent { @Input() state: HttpRequestState&lt;MyData&gt;; } &lt;!-- Presentational component template --&gt; &lt;my-loading-spinner *ngIf=&quot;state.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;state.error&quot; [error]=&quot;state.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;state.value&quot; [data]=&quot;state.value&quot;&gt;&lt;/my-data-component&gt; &lt;!-- Smart component template --&gt; &lt;some-layout-component [state]=&quot;myDataState$ | async&quot; &gt;&lt;/some-layout-component&gt; Or separated observables export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}), shareReplay(1) // Added shareReplay to allow multicasting this ) ), ); readonly loading$ = this.myDataState$.pipe(map(state =&gt; state.isLoading)); readonly error$ = this.myDataState$.pipe(map(state =&gt; state.error)); readonly myData$ = this.myDataState$.pipe(map(state =&gt; state.data)); } shareReplay(1) is preferred over share() for robustness, as it ensures none of the subscriptions miss the initial state.","keywords":"","version":null},{"title":"RxJS Spartacus Analytics","type":0,"sectionRef":"#","url":"/blog/rx-js-sap-composable-storefront-events","content":" provideConfig({ tagManager: { gtm: { events: [TmsAnalyticsEvent], gtmId: 'XXX' } } } as TmsConfig) Custom event that extends CxEvent export class TmsAnalyticsEvent extends CxEvent { event: string; _clear: boolean; constructor(eventName: string) { super(); this.event = eventName; this._clear = true; } } _clear flag is required to disable automatic object merging by GTM dataLayer on SPA Source: https://github.com/google/data-layer-helper#preventing-default-recursive-merge Custom interface to map SPA with TMS export enum TmsEventName { viewCart = 'view_cart', addToCart = 'add_to_cart' } export interface TmsCustomPayload { checkout_type: string; currency: string; items: TmsProduct[]; } export class TmsCustomEvent extends TmsAnalyticsEvent { ecommerce: TmsCustomPayload; constructor(eventName: TmsEventName, payload: TmsCustomPayload) { super(eventName); this.ecommerce = payload; } } Custom services that capture default events and dispatch TmsAnalyticsEvent export abstract class CustomAnalyticsEventService { protected subscriptions = new Subscription(); abstract enableTracking(): void; destroy(): void { this.subscriptions.unsubscribe(); } } @Injectable({ providedIn: 'root' }) export class CustomViewCartEventService extends CustomAnalyticsEventService { constructor(protected events: EventService, protected cartService: ActiveCartService) { super(); } enableTracking(): void { this.subscriptions.add( this.events.get(CartPageEvent).subscribe((_) =&gt; { this.cartService.getActive().pipe(take(1)).subscribe( data =&gt; { //here we can map it to the required interface const payload = data; this.events.dispatch(new TmsCustomEvent(TmsEventName.viewCart, payload)); } ) }) ); } } Core service that enable required events @Injectable({ providedIn: 'root' }) export class CustomAnalyticsService { constructor( protected viewCartEventService: CustomViewCartEventService, protected addToCartEventService: CustomAddToCartEventService ) {} trackEvents(): void { this.viewCartEventService.enableTracking(); this.addToCartEventService.enableTracking(); } destroy(): void { this.viewCartEventService.destroy(); this.addToCartEventService.destroy(); } } Enable analytics service from app component @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent implements OnInit, OnDestroy { constructor(protected customAnalyticsService: CustomAnalyticsService) {} public ngOnInit(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.trackEvents(); } } public ngOnDestroy(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.destroy(); } } } ","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"Frontend training","type":0,"sectionRef":"#","url":"/docs/","content":"","keywords":"","version":"Next"},{"title":"Quick Navigation​","type":1,"pageTitle":"Frontend training","url":"/docs/#quick-navigation","content":"","version":"Next","tagName":"h2"},{"title":"WebDev for beginners​","type":1,"pageTitle":"Frontend training","url":"/docs/#webdev-for-beginners","content":"Essential and clean code snippetsProgramming essential steps how to install node, javawhat is package json and npmcommands (start, pretty-fix)library vs appbackend-frontend appstesting appsAngularExpress RESTHow to setup CommerceHow to work with Spartacus analytics and GTMRxJS essentials (pipe with async) Why web development? State of the artExample appsFrom web to native (also PWA) 3 essential languages HTML examples CSS bootstrapexamples JavaScript jQuerydebuggingstorage: local storage, session, SQLlitecounter ( event handling)http requests (axios) Node development BE and FE apps package.json, node, npm Data transmission architectures Client server DBSOAP, RESTful, GraphQL, gRPC, WebCocket, Webhook Development tools Angular, React, VueIDE, git, Github, gitpod (deploy)One project with multipel modules for each topic Data types (module/s) JSONimages (upload?)binary (for compression) HTTP, WebSockets, webhooks? Project and CRUD apps Bluetooth (module) GPS (module) Compression (module) Error detection and correction (module) Tech trends and market needs in 2024 FE: Angular, React, Vue SAP composable storefront BE: Spring boot, C#, python DevOps: Azure, AWS, gogole cloud ","version":"Next","tagName":"h2"},{"title":"CSS Essentials","type":0,"sectionRef":"#","url":"/docs/introduction/css-essentials","content":"CSS Essentials","keywords":"","version":"Next"},{"title":"JS Essentials","type":0,"sectionRef":"#","url":"/docs/introduction/js-essentials","content":"JS Essentials","keywords":"","version":"Next"},{"title":"Custom event that extends CxEvent","type":0,"sectionRef":"#","url":"/blog/tags/analytics","content":" provideConfig({ tagManager: { gtm: { events: [TmsAnalyticsEvent], gtmId: 'XXX' } } } as TmsConfig) Custom event that extends CxEvent export class TmsAnalyticsEvent extends CxEvent { event: string; _clear: boolean; constructor(eventName: string) { super(); this.event = eventName; this._clear = true; } } _clear flag is required to disable automatic object merging by GTM dataLayer on SPA Source: https://github.com/google/data-layer-helper#preventing-default-recursive-merge Custom interface to map SPA with TMS export enum TmsEventName { viewCart = 'view_cart', addToCart = 'add_to_cart' } export interface TmsCustomPayload { checkout_type: string; currency: string; items: TmsProduct[]; } export class TmsCustomEvent extends TmsAnalyticsEvent { ecommerce: TmsCustomPayload; constructor(eventName: TmsEventName, payload: TmsCustomPayload) { super(eventName); this.ecommerce = payload; } } Custom services that capture default events and dispatch TmsAnalyticsEvent export abstract class CustomAnalyticsEventService { protected subscriptions = new Subscription(); abstract enableTracking(): void; destroy(): void { this.subscriptions.unsubscribe(); } } @Injectable({ providedIn: 'root' }) export class CustomViewCartEventService extends CustomAnalyticsEventService { constructor(protected events: EventService, protected cartService: ActiveCartService) { super(); } enableTracking(): void { this.subscriptions.add( this.events.get(CartPageEvent).subscribe((_) =&gt; { this.cartService.getActive().pipe(take(1)).subscribe( data =&gt; { //here we can map it to the required interface const payload = data; this.events.dispatch(new TmsCustomEvent(TmsEventName.viewCart, payload)); } ) }) ); } } Core service that enable required events @Injectable({ providedIn: 'root' }) export class CustomAnalyticsService { constructor( protected viewCartEventService: CustomViewCartEventService, protected addToCartEventService: CustomAddToCartEventService ) {} trackEvents(): void { this.viewCartEventService.enableTracking(); this.addToCartEventService.enableTracking(); } destroy(): void { this.viewCartEventService.destroy(); this.addToCartEventService.destroy(); } } Enable analytics service from app component @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent implements OnInit, OnDestroy { constructor(protected customAnalyticsService: CustomAnalyticsService) {} public ngOnInit(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.trackEvents(); } } public ngOnDestroy(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.destroy(); } } } ","keywords":"","version":null},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#getting-started","content":"Get started by creating a new site. Or try Docusaurus immediately with docusaurus.new. ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#what-youll-need","content":"Node.js version 16.14 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies. ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#generate-a-new-site","content":"Generate a new Docusaurus site using the classic template. The classic template will automatically be added to your project after you run the command: npm init docusaurus@latest my-website classic  You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor. The command also installs all necessary dependencies you need to run Docusaurus. ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#start-your-site","content":"Run the development server: cd my-website npm run start  The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there. The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/. Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/congratulations","content":"","keywords":"","version":"Next"},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/docs/tutorial-basics/congratulations#whats-next","content":"Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community ","version":"Next","tagName":"h2"},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-blog-post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/docs/tutorial-basics/create-a-blog-post#create-your-first-post","content":"Create a file at blog/2021-02-28-greetings.md: blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like.  A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-document","content":"","keywords":"","version":"Next"},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial-basics/create-a-document#create-your-first-doc","content":"Create a Markdown file at docs/hello.md: docs/hello.md # Hello This is my **first Docusaurus document**!  A new document is now available at http://localhost:3000/docs/hello. ","version":"Next","tagName":"h2"},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial-basics/create-a-document#configure-the-sidebar","content":"Docusaurus automatically creates a sidebar from the docs folder. Add metadata to customize the sidebar label and position: docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!  It is also possible to create your sidebar explicitly in sidebars.js: sidebars.js module.exports = { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial-basics/create-a-document'], }, ], };  ","version":"Next","tagName":"h2"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/deploy-your-site","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial-basics/deploy-your-site#build-your-site","content":"Build your site for production: npm run build  The static files are generated in the build folder. ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial-basics/deploy-your-site#deploy-your-site-1","content":"Test your production build locally: npm run serve  The build folder is now served at http://localhost:3000/. You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/docs/tutorial-extras/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-page","content":"","keywords":"","version":"Next"},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial-basics/create-a-page#create-your-first-react-page","content":"Create a file at src/pages/my-react-page.js: src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }  A new page is now available at http://localhost:3000/my-react-page. ","version":"Next","tagName":"h2"},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial-basics/create-a-page#create-your-first-markdown-page","content":"Create a file at src/pages/my-markdown-page.md: src/pages/my-markdown-page.md # My Markdown page This is a Markdown page  A new page is now available at http://localhost:3000/my-markdown-page. ","version":"Next","tagName":"h2"},{"title":"Improved separation of concerns","type":0,"sectionRef":"#","url":"/blog/tags/is-loading-flag","content":"Ways to implement the isLoading flag export interface HttpRequestState&lt;T&gt; { isLoading: boolean; value?: T; error?: HttpErrorResponse | Error; } export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}) ) ), ); } &lt;ng-container *ngIf=&quot;myDataState$ | async as data&quot;&gt; &lt;my-loading-spinner *ngIf=&quot;data.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;data.error&quot; [error]=&quot;data.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;data.value&quot; [data]=&quot;data.value&quot;&gt;&lt;/my-data-component&gt; &lt;/ng-container&gt; Improved separation of concerns // presentational component class export class SomeLayoutComponent { @Input() state: HttpRequestState&lt;MyData&gt;; } &lt;!-- Presentational component template --&gt; &lt;my-loading-spinner *ngIf=&quot;state.isLoading&quot;&gt;&lt;/my-loading-spinner&gt; &lt;my-error-component *ngIf=&quot;state.error&quot; [error]=&quot;state.error&quot;&gt;&lt;/my-error-component&gt; &lt;my-data-component *ngIf=&quot;state.value&quot; [data]=&quot;state.value&quot;&gt;&lt;/my-data-component&gt; &lt;!-- Smart component template --&gt; &lt;some-layout-component [state]=&quot;myDataState$ | async&quot; &gt;&lt;/some-layout-component&gt; Or separated observables export class SomeComponent { constructor( private readonly activatedRoute: ActivatedRoute, private readonly myDataService: MyDataService ) {} readonly myDataState$: Observable&lt;HttpRequestState&lt;MyData&gt;&gt; = this.activatedRoute.params.pipe( pluck('id'), switchMap( (id) =&gt; this.myDataService.getMyData(id).pipe( map((value) =&gt; ({isLoading: false, value})), catchError(error =&gt; of({isLoading: false, error})), startWith({isLoading: true}), shareReplay(1) // Added shareReplay to allow multicasting this ) ), ); readonly loading$ = this.myDataState$.pipe(map(state =&gt; state.isLoading)); readonly error$ = this.myDataState$.pipe(map(state =&gt; state.error)); readonly myData$ = this.myDataState$.pipe(map(state =&gt; state.data)); } shareReplay(1) is preferred over share() for robustness, as it ensures none of the subscriptions miss the initial state.","keywords":"","version":null},{"title":"Custom event that extends CxEvent","type":0,"sectionRef":"#","url":"/blog/tags/spartacus","content":" provideConfig({ tagManager: { gtm: { events: [TmsAnalyticsEvent], gtmId: 'XXX' } } } as TmsConfig) Custom event that extends CxEvent export class TmsAnalyticsEvent extends CxEvent { event: string; _clear: boolean; constructor(eventName: string) { super(); this.event = eventName; this._clear = true; } } _clear flag is required to disable automatic object merging by GTM dataLayer on SPA Source: https://github.com/google/data-layer-helper#preventing-default-recursive-merge Custom interface to map SPA with TMS export enum TmsEventName { viewCart = 'view_cart', addToCart = 'add_to_cart' } export interface TmsCustomPayload { checkout_type: string; currency: string; items: TmsProduct[]; } export class TmsCustomEvent extends TmsAnalyticsEvent { ecommerce: TmsCustomPayload; constructor(eventName: TmsEventName, payload: TmsCustomPayload) { super(eventName); this.ecommerce = payload; } } Custom services that capture default events and dispatch TmsAnalyticsEvent export abstract class CustomAnalyticsEventService { protected subscriptions = new Subscription(); abstract enableTracking(): void; destroy(): void { this.subscriptions.unsubscribe(); } } @Injectable({ providedIn: 'root' }) export class CustomViewCartEventService extends CustomAnalyticsEventService { constructor(protected events: EventService, protected cartService: ActiveCartService) { super(); } enableTracking(): void { this.subscriptions.add( this.events.get(CartPageEvent).subscribe((_) =&gt; { this.cartService.getActive().pipe(take(1)).subscribe( data =&gt; { //here we can map it to the required interface const payload = data; this.events.dispatch(new TmsCustomEvent(TmsEventName.viewCart, payload)); } ) }) ); } } Core service that enable required events @Injectable({ providedIn: 'root' }) export class CustomAnalyticsService { constructor( protected viewCartEventService: CustomViewCartEventService, protected addToCartEventService: CustomAddToCartEventService ) {} trackEvents(): void { this.viewCartEventService.enableTracking(); this.addToCartEventService.enableTracking(); } destroy(): void { this.viewCartEventService.destroy(); this.addToCartEventService.destroy(); } } Enable analytics service from app component @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent implements OnInit, OnDestroy { constructor(protected customAnalyticsService: CustomAnalyticsService) {} public ngOnInit(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.trackEvents(); } } public ngOnDestroy(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.destroy(); } } } ","keywords":"","version":null},{"title":"HTML Essentials","type":0,"sectionRef":"#","url":"/docs/introduction/html-essentials","content":"","keywords":"","version":"Next"},{"title":"1. Starting point​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#1-starting-point","content":"Create a new file called index.html in a new folder called app. All HTML pages are based on tags (html, title, body, h1, etc) and start from the same structure: app/index.html &lt;html&gt; &lt;title&gt;First app&lt;/title&gt; &lt;body&gt; &lt;h1&gt;Welcome to HTML Essentials tutorial&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;  The only values that are customizable in the above app are the title and the h1 tags text values. These values can be seen if we open the newly created file into a browser. ","version":"Next","tagName":"h2"},{"title":"2. Building blocks​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#2-building-blocks","content":"&lt;button&gt;This is a button&lt;/button&gt; &lt;h1&gt;Heading 1&lt;/h1&gt; &lt;h2&gt;Heading 2&lt;/h2&gt; &lt;h3&gt;Heading 3&lt;/h3&gt; &lt;h4&gt;Heading 4&lt;/h4&gt; &lt;h5&gt;Heading 5&lt;/h5&gt; &lt;h6&gt;Heading 6&lt;/h6&gt; &lt;p&gt;This is a paragraph&lt;/p&gt; &lt;div&gt;This is the most used building block in web apps. It is called a division and is very versatile. Basically is a container for any kind of html elements.&lt;/div&gt; &lt;input/&gt;  The HTML elements have specific attributes (common and specific). For example, the anchor element has href attribute that alows us to specify the target of the link.  &lt;a href=&quot;https://www.danradu.ro&quot;&gt;Attribute anchor example&lt;/a&gt;  Inputs could also be configured through attributes: &lt;input type=&quot;text&quot;/&gt;  type=&quot;text&quot; type=&quot;password&quot; type=&quot;checkbox&quot; type=&quot;radio&quot; type=&quot;range&quot; type=&quot;date&quot; ","version":"Next","tagName":"h2"},{"title":"3. Adding JavaScript​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#3-adding-javascript","content":"","version":"Next","tagName":"h2"},{"title":"Adding JS into HTML​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#adding-js-into-html","content":"app/index.html &lt;head&gt; &lt;script&gt; function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML = &quot;Paragraph changed.&quot;; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;demo&quot;&gt;A Paragraph&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;/body&gt;  ","version":"Next","tagName":"h3"},{"title":"Adding JS from external file​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#adding-js-from-external-file","content":"app/index.html &lt;head&gt; &lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;demo&quot;&gt;A Paragraph&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;/body&gt;  app/index.js function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML = &quot;Paragraph changed.&quot;; }  ","version":"Next","tagName":"h3"},{"title":"4. Adding CSS​","type":1,"pageTitle":"HTML Essentials","url":"/docs/introduction/html-essentials#4-adding-css","content":"","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/docs/tutorial-extras/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  ","version":"Next","tagName":"h2"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/markdown-features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#front-matter","content":"Markdown documents have metadata at the top called Front Matter: my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)  ","version":"Next","tagName":"h2"},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#links","content":"Regular Markdown links are supported, using url paths or relative file paths. Let's see how to [Create a page](/create-a-page).  Let's see how to [Create a page](./create-a-page.md).  Result: Let's see how to Create a page. ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#images","content":"Regular Markdown images are supported. You can use absolute paths to reference images in the static directory (static/img/docusaurus.png): ![Docusaurus logo](/img/docusaurus.png)   You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them: ![Docusaurus logo](./img/docusaurus.png)  ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#code-blocks","content":"Markdown code blocks are supported with Syntax highlighting. ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) } ```  src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }  ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#admonitions","content":"Docusaurus has a special syntax to create admonitions and callouts: :::tip My tip Use this awesome feature option ::: :::danger Take care This action is dangerous :::  My tip Use this awesome feature option Take care This action is dangerous ","version":"Next","tagName":"h2"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#mdx-and-react-components","content":"MDX can make your documentation more interactive and allows using any React components inside Markdown: export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !  This is Docusaurus green ! This is Facebook blue ! ","version":"Next","tagName":"h2"},{"title":"Custom event that extends CxEvent","type":0,"sectionRef":"#","url":"/blog/tags/sap-composable-storefront","content":" provideConfig({ tagManager: { gtm: { events: [TmsAnalyticsEvent], gtmId: 'XXX' } } } as TmsConfig) Custom event that extends CxEvent export class TmsAnalyticsEvent extends CxEvent { event: string; _clear: boolean; constructor(eventName: string) { super(); this.event = eventName; this._clear = true; } } _clear flag is required to disable automatic object merging by GTM dataLayer on SPA Source: https://github.com/google/data-layer-helper#preventing-default-recursive-merge Custom interface to map SPA with TMS export enum TmsEventName { viewCart = 'view_cart', addToCart = 'add_to_cart' } export interface TmsCustomPayload { checkout_type: string; currency: string; items: TmsProduct[]; } export class TmsCustomEvent extends TmsAnalyticsEvent { ecommerce: TmsCustomPayload; constructor(eventName: TmsEventName, payload: TmsCustomPayload) { super(eventName); this.ecommerce = payload; } } Custom services that capture default events and dispatch TmsAnalyticsEvent export abstract class CustomAnalyticsEventService { protected subscriptions = new Subscription(); abstract enableTracking(): void; destroy(): void { this.subscriptions.unsubscribe(); } } @Injectable({ providedIn: 'root' }) export class CustomViewCartEventService extends CustomAnalyticsEventService { constructor(protected events: EventService, protected cartService: ActiveCartService) { super(); } enableTracking(): void { this.subscriptions.add( this.events.get(CartPageEvent).subscribe((_) =&gt; { this.cartService.getActive().pipe(take(1)).subscribe( data =&gt; { //here we can map it to the required interface const payload = data; this.events.dispatch(new TmsCustomEvent(TmsEventName.viewCart, payload)); } ) }) ); } } Core service that enable required events @Injectable({ providedIn: 'root' }) export class CustomAnalyticsService { constructor( protected viewCartEventService: CustomViewCartEventService, protected addToCartEventService: CustomAddToCartEventService ) {} trackEvents(): void { this.viewCartEventService.enableTracking(); this.addToCartEventService.enableTracking(); } destroy(): void { this.viewCartEventService.destroy(); this.addToCartEventService.destroy(); } } Enable analytics service from app component @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent implements OnInit, OnDestroy { constructor(protected customAnalyticsService: CustomAnalyticsService) {} public ngOnInit(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.trackEvents(); } } public ngOnDestroy(): void { if (ENVIRONMENT.analyticsEnabled) { this.customAnalyticsService.destroy(); } } } ","keywords":"","version":null}],"options":{"languages":["en","de"],"id":"default"}}