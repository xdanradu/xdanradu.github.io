{"version":3,"sources":["components/card/card.jsx","pages/showcase/shop.jsx","App.jsx","redux-store/actions.js","redux-store/actionTypes.js","serviceWorker.js","redux-store/store.js","index.jsx","redux-store/reducers.js"],"names":["Badge","props","value","className","Card","this","position","title","description","counter","onIncrement","onClick","Component","Shop","counters","NavBar","lazy","Home","App","fallback","onDecrement","decremented","incremented","onReset","reseted","onCleared","cleared","exact","path","onCreate","created","onDelete","deleted","id","mapDispatchToProps","type","payload","connect","state","Boolean","window","location","hostname","match","store","user","name","createStore","action","incCounters","index","indexOf","decCounters","decIndex","produce","draft","length","push","nextId","reduce","prev","curr","rCounters","rIndex","cCounters","i","console","log","splice","findIndex","c","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b091f00d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './card.scss';\n\nfunction Badge(props) {\n  let { value } = props;\n  if (value > 0) return <div className=\"counter-badge\">{value}</div>;\n  return '';\n}\n\nclass Card extends Component {\n  render() {\n    let { position, title, description, counter, onIncrement } = this.props;\n    return (\n      <div className=\"card\">\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <div className=\"content\">\n          <Badge value={counter.value} />\n\n          <h2>{position}</h2>\n          <h3>{title}</h3>\n          <p>{description}</p>\n          <button className=\"noselect\" onClick={() => onIncrement(counter)}>\n            Add to cart\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './shop.scss';\nimport Card from '../../components/card/card';\n\nclass Shop extends Component {\n  render() {\n    let { counters, onIncrement } = this.props;\n    return (\n      <div className=\"card-container\">\n        <Card\n          position=\"01\"\n          title=\"JavaScript\"\n          description=\"Angular, React, VueJS, NodeJS\"\n          counter={counters[0]}\n          onIncrement={onIncrement}\n        />\n        <Card\n          position=\"02\"\n          title=\"HTML/CSS\"\n          description=\"UI/UX\"\n          counter={counters[1]}\n          onIncrement={onIncrement}\n        />\n        <Card\n          position=\"03\"\n          title=\"Java\"\n          description=\"Spring boot, JWT, Hibernate, Flyway\"\n          counter={counters[2]}\n          onIncrement={onIncrement}\n        />\n        <Card\n          position=\"04\"\n          title=\"C#\"\n          description=\"Rest API's, 3 Tier Architecture\"\n          counter={counters[3]}\n          onIncrement={onIncrement}\n        />\n        <Card\n          position=\"05\"\n          title=\"SQL\"\n          description=\"PosgreSQL, SQL Server, MySQL\"\n          counter={counters[4]}\n          onIncrement={onIncrement}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Shop;\n","import React, { Component, lazy, Suspense } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {\n  decremented,\n  incremented,\n  created,\n  reseted,\n  deleted,\n  cleared\n} from './redux-store/actions';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Shop from './pages/showcase/shop';\n\nconst NavBar = lazy(() => import('./components/navbar/navbar'));\nconst Home = lazy(() => import('./pages/home/home'));\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Suspense fallback={<div>Loading... </div>}>\n          <NavBar\n            counters={this.props.counters}\n            onDecrement={this.props.decremented}\n            onIncrement={this.props.incremented}\n            onReset={this.props.reseted}\n            onCleared={this.props.cleared}\n          />\n        </Suspense>\n\n        <div className=\"page-layout\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Suspense fallback={<div>Loading... </div>}>\n                <Home />\n              </Suspense>\n            </Route>\n            <Route exact path=\"/shop\">\n              <Shop\n                onCreate={this.props.created}\n                onReset={this.props.reseted}\n                onIncrement={this.props.incremented}\n                onDecrement={this.props.incremented}\n                onDelete={this.props.deleted}\n                counters={this.props.counters}\n              />\n            </Route>\n          </Switch>\n        </div>\n        <div id=\"bottom-menu\">&copy; 2021</div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    counters: state.counters\n  };\n};\n\nconst mapDispatchToProps = {\n  decremented,\n  incremented,\n  created,\n  reseted,\n  deleted,\n  cleared\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  DECREMENTED,\n  INCREMENTED,\n  CREATED,\n  RESETED,\n  DELETED,\n  CLEARED\n} from './actionTypes';\n\nexport const incremented = counter => ({\n  type: INCREMENTED,\n  payload: {\n    counter: counter\n  }\n});\n\nexport const decremented = counter => ({\n  type: DECREMENTED,\n  payload: {\n    counter: counter\n  }\n});\n\nexport const created = () => ({\n  type: CREATED\n});\n\nexport const reseted = counter => ({\n  type: RESETED,\n  payload: {\n    counter: counter\n  }\n});\n\nexport const deleted = id => ({\n  type: DELETED,\n  payload: {\n    id: id\n  }\n});\n\nexport const cleared = () => ({\n  type: CLEARED\n});\n","export const INCREMENTED = 'incremented';\nexport const DECREMENTED = 'decremented';\nexport const CREATED = 'created';\nexport const RESETED = 'reseted';\nexport const DELETED = 'deleted';\nexport const CLEARED = 'cleared';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const store = {\n  user: {\n    name: ''\n  },\n  counters: [\n    { id: 1, value: 0, name: 'JavaScript' },\n    { id: 2, value: 0, name: 'HTML/CSS' },\n    { id: 3, value: 0, name: 'Java' },\n    { id: 4, value: 0, name: 'C#' },\n    { id: 5, value: 0, name: 'SQL' }\n  ]\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './redux-store/reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  DECREMENTED,\n  INCREMENTED,\n  CREATED,\n  RESETED,\n  DELETED,\n  CLEARED\n} from './actionTypes';\nimport { store } from './store';\nimport { produce } from 'immer';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case INCREMENTED:\n      const incCounters = [...state.counters];\n      const index = incCounters.indexOf(action.payload.counter);\n      incCounters[index] = { ...action.payload.counter };\n      incCounters[index].value += 1;\n      return { counters: incCounters };\n    case DECREMENTED:\n      const decCounters = [...state.counters];\n      const decIndex = decCounters.indexOf(action.payload.counter);\n      decCounters[decIndex] = { ...action.payload.counter };\n      if (decCounters[decIndex].value > 0) decCounters[decIndex].value -= 1;\n      return { counters: decCounters };\n    case CREATED:\n      return produce(state, draft => {\n        if (state.counters.length === 0)\n          draft.counters.push({ id: 1, value: 0 });\n        else {\n          const max = state.counters.reduce((prev, curr) =>\n            prev.id > curr.id ? prev : curr\n          );\n          const nextId = max.id + 1;\n          draft.counters.push({ id: nextId, value: 0 });\n        }\n      });\n    case RESETED:\n      const rCounters = [...state.counters];\n      const rIndex = rCounters.indexOf(action.payload.counter);\n      rCounters[rIndex] = { ...action.payload.counter };\n      rCounters[rIndex].value = 0;\n      return { counters: rCounters };\n    case CLEARED:\n      const cCounters = [...state.counters];\n      for (let i = 0; i < cCounters.length; i++) {\n        cCounters[i].value = 0;\n      }\n      return { counters: cCounters };\n    case DELETED:\n      console.log(action);\n      return produce(state, draft => {\n        draft.counters.splice(\n          draft.counters.findIndex(c => c.id === action.payload.id),\n          1\n        );\n      });\n    default:\n      break;\n  }\n\n  return store;\n}\n"],"sourceRoot":""}