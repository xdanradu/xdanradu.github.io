{"version":3,"sources":["components/navbar/navbar.jsx","components/counters/counter.jsx","components/about/about.jsx","components/counters/counters.jsx","App.jsx","redux-store/actions.js","redux-store/actionTypes.js","serviceWorker.js","redux-store/store.js","index.jsx","redux-store/reducers.js"],"names":["NavBar","totalCounters","class","id","exact","to","activeClassName","href","className","onClick","e","preventDefault","topnav","document","getElementById","toggle","Counter","console","log","Fragment","this","props","children","getBadgeClasses","formatCount","onIncrement","counter","onDelete","classes","value","count","Component","About","App","state","counters","filter","c","length","path","mapDispatchToProps","incremented","type","payload","created","reseted","deleted","connect","Boolean","window","location","hostname","match","store","user","name","createStore","action","incCounters","index","indexOf","produce","draft","push","nextId","reduce","prev","curr","map","splice","findIndex","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f3614c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.scss\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n        Link,\r\n  NavLink\r\n} from \"react-router-dom\";\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  function toggle(e) {\r\n    e.preventDefault();\r\n    var topnav = document.getElementById(\"myTopnav\");\r\n    if (topnav.className === \"topnav\") {\r\n      topnav.className += \" responsive\";\r\n    } else {\r\n      topnav.className = \"topnav\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <div class=\"topnav\" id=\"myTopnav\">\r\n        <NavLink exact={true}  to=\"/\" activeClassName=\"active\">\r\n          Home\r\n        </NavLink>\r\n        <NavLink to=\"/about\" activeClassName=\"active\">\r\n          About\r\n        </NavLink>\r\n        <Link to=\"/skills\" activeClassName=\"active\">\r\n          Skills\r\n        </Link>\r\n        <a id=\"experience\" href=\"#experience\">\r\n          Experience\r\n        </a>\r\n        <a id=\"portfolio\" href=\"#portfolio\">\r\n          Portfolio\r\n        </a>\r\n        <a id=\"contact\" href=\"#contact\">\r\n          Contact\r\n        </a>\r\n        <div className=\"badge-pill\">\r\n          {totalCounters}\r\n        </div>\r\n        <a id=\"breadcrumb\" onClick={(e) => toggle(e)} class=\"icon\" >\r\n          <i class=\"fa fa-bars\"></i>\r\n        </a>\r\n      </div>\r\n\r\n    </nav>\r\n\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    console.log(\"Counter rendered\");\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          className=\"btn btn-primary m-2\"\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger m-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-3 p-3 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n    render() {\n        return (\n        <div>About</div>\n        );\n    }\n}\n\nexport default (About);\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"Counters rendered\");\r\n    const { onCreate, onReset, onDelete, onIncrement, counters } = this.props;\r\n    return (\r\n      <div>\r\n          <button className=\"btn btn-primary m-2\" onClick={onCreate}>\r\n              Create\r\n          </button>\r\n        <button className=\"btn btn-primary m-2\" onClick={onReset}>\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            className=\"m-3\"\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n          >\r\n            <h4>Counter #{counter.id}</h4>\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (Counters);\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar/navbar\";\r\nimport Counters from \"./components/counters/counters\";\r\nimport About from \"./components/about/about\";\r\nimport \"./App.css\";\r\nimport {connect} from 'react-redux';\r\nimport {incremented, created, reseted, deleted} from './redux-store/actions';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n    state = {}\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <NavBar totalCounters={this.props.counters.filter((c) => c.value > 0).length}/>\r\n\r\n          <Switch>\r\n              <Route exact path=\"/\">\r\n                  {/*\r\n                  <Counters\r\n                          onCreate={this.props.created}\r\n                          onReset={this.props.reseted}\r\n                          onIncrement={this.props.incremented}\r\n                          onDelete={this.props.deleted}\r\n                          counters={this.props.counters}\r\n                  />*/}\r\n              </Route>\r\n              <Route exact path=\"/about\">\r\n                  <About/>\r\n              </Route>\r\n          </Switch>\r\n\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    counters: state.counters\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { incremented, created, reseted, deleted }\r\n\r\nexport default connect(\r\n        mapStateToProps,\r\n        mapDispatchToProps\r\n)(App);\r\n","import { INCREMENTED, CREATED, RESETED, DELETED } from \"./actionTypes\";\r\n\r\nexport const incremented = (counter) => ({\r\n  type: INCREMENTED,\r\n  payload: {\r\n    counter: counter,\r\n  },\r\n});\r\n\r\nexport const created = () => ({\r\n  type: CREATED\r\n});\r\n\r\nexport const reseted = () =>({\r\n  type: RESETED\r\n});\r\n\r\nexport const deleted = (id) =>({\r\n  type: DELETED,\r\n  payload: {\r\n    id: id\r\n  }\r\n});\r\n","export const INCREMENTED = \"incremented\";\r\nexport const CREATED = \"created\";\r\nexport const RESETED = \"reseted\";\r\nexport const DELETED = \"deleted\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const store = {\n    user: {\n        name: \"\",\n    },\n    counters: [\n        { id: 1, value: 0 },\n        { id: 2, value: 1 },\n        { id: 3, value: 2 },\n    ],\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n// import store from \"./redux/store\";\r\nimport reducer from \"./redux-store/reducers\";\r\n\r\nimport { incremented } from \"./redux-store/actions\";\r\n\r\nconst store = createStore(reducer);\r\n// store.dispatch(incremented(1));\r\n// /console.log(store.getState());\r\n\r\nReactDOM.render(\r\n        <Provider store={store}><App/>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { INCREMENTED, CREATED, RESETED, DELETED } from \"./actionTypes\";\r\nimport { store } from \"./store\";\r\nimport {produce } from \"immer\";\r\n\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case INCREMENTED :\r\n      const incCounters = [...state.counters];\r\n      const index = incCounters.indexOf(action.payload.counter);\r\n      incCounters[index] = { ...action.payload.counter };\r\n      incCounters[index].value+=1;\r\n      return { counters: incCounters };\r\n      break;\r\n    case CREATED:\r\n      return produce(state, draft => {\r\n        if (state.counters.length==0) draft.counters.push({ id: 1, value: 0 }); else {\r\n          const max = state.counters.reduce((prev, curr) => prev.id > curr.id ? prev : curr);\r\n          const nextId = max.id + 1;\r\n          draft.counters.push({ id: nextId, value: 0 },);\r\n        }\r\n\r\n        });\r\n      break;\r\n    case RESETED:\r\n      return produce(state, draft => {\r\n        console.log(draft);\r\n        draft.counters.map((c) => {\r\n          c.value = 0;\r\n          return c;\r\n        });\r\n      });\r\n      break\r\n    case DELETED:\r\n      console.log(action);\r\n      return produce(state, draft => {\r\n        draft.counters.splice(draft.counters.findIndex(c => c.id === action.payload.id), 1);\r\n      });\r\n      break;\r\n  }\r\n\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}